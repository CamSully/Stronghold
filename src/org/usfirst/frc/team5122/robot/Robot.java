// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5122.robot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.USBCamera;

import org.usfirst.frc.team5122.robot.commands.Record;
import org.usfirst.frc.team5122.robot.commands.autoComponents.*;
import org.usfirst.frc.team5122.robot.subsystems.*;

import com.ni.vision.NIVision;
import com.ni.vision.NIVision.Image;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoModeChooser;

    // Unused: vision beta.
    NetworkTable table;
    
    public static OI oi;
    public static Drivetrain drivetrain;
    public static Shooter shooter;
    public static Lift lift;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        shooter = new Shooter();
        lift = new Lift();
        
        // OLD CAMERA #######################################################################
        // camera = CameraServer.getInstance();
        // camera.startAutomaticCapture("cam0");
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        autoModeChooser = new SendableChooser();
        // Put all autonomous programs for different positions on the sendable chooser.
        autoModeChooser.addObject("Cheval", new A_Over_Cheval());
        autoModeChooser.addObject("Portcullis", new A_Over_Portcullis());
        autoModeChooser.addDefault("Ramparts", new A_Over_Ramparts());
        autoModeChooser.addObject("Rockwall", new A_Over_Rockwall());
        autoModeChooser.addObject("Moat", new A_Over_Moat());
        autoModeChooser.addObject("Rough Terrain", new A_Over_RoughTerrain());
        autoModeChooser.addObject("Lowbar", new A_Under_Lowbar());
        autoModeChooser.addObject("Nothing", new A_Nothing());
        
        SmartDashboard.putData("Auto Mode Chooser", autoModeChooser);
        
        SmartDashboard.putData(Scheduler.getInstance());
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	RobotMap.rotatorEncoder.reset();     // Have people put lift on bottom and reset it for consistency.
    	
    	autonomousCommand = (Command) autoModeChooser.getSelected();
        autonomousCommand.start();
        
        if (autonomousCommand != null) autonomousCommand.start();
        }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Drivetrain Left Rotations", drivetrain.getLeftDistance());
    }

    public void teleopInit() {
    	
    	// START CAMERA CODE ########################################
//    	try {
//        	new Thread(new CamThread()).start();
//        } catch(Exception ex) {
//        	ex.printStackTrace();
//        }
    	// END CAMERA CODE ###########################################
    	
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
    }
        
//         START CAMERA CODE ####################################################
//        class CamThread implements Runnable {
//
//    		@Override
//    		public void run() {
//    			
//    			USBCamera cam = new USBCamera("cam0");
//    			Timer.delay(2);
//
//    			Image frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
//
//    	        cam.setExposureManual(0);
//    	        cam.setFPS(6);
//    	        cam.setBrightness(75);
//    	        cam.startCapture();
//    			
//    			
//    			while (true)
//    			{
//    		        
//    		        cam.getImage(frame);
//    		        
//    		        CameraServer.getInstance().setImage(frame);
//    		        
//    				try {
//    					Thread.sleep(1);
//    				} catch (InterruptedException e) {
//    					e.printStackTrace();
//    				}
//    			}        
//    		}
//        }
//     END CAMERA CODE ###########################################

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        // Put a bunch of diagnostic info on the SmartDashboard (in this loop it will be continuously updated).
        SmartDashboard.putNumber("Rotator Encoder Rotations", shooter.getDistance());
        SmartDashboard.putBoolean("Rotator on Bottom Limit", shooter.getBottomLimit());
        SmartDashboard.putNumber("Rotator Speed", shooter.getSpeed());
//      SmartDashboard.putNumber("Distance to Target", drivetrain.getDistance());
        SmartDashboard.putBoolean("Tomahawks Down", lift.getTomahawksDown());
        SmartDashboard.putNumber("Drivetrain Left Rotations", drivetrain.getLeftDistance());
        // SmartDashboard.putNumber("Right Motor Rotations", drivetrain.getRightDistance());
        SmartDashboard.putBoolean("Rotator on Top Limit", shooter.getTopLimit());
        SmartDashboard.putBoolean("Wheels Firing", shooter.getFiring());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
