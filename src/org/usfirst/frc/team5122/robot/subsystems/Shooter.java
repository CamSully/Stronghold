// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team5122.robot.subsystems;

import org.usfirst.frc.team5122.robot.OI;
import org.usfirst.frc.team5122.robot.RobotMap;
import org.usfirst.frc.team5122.robot.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Shooter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftRotator = RobotMap.shooterLeftRotator;
    SpeedController rightRotator = RobotMap.shooterRightRotator;
    
    SpeedController leftShooter = RobotMap.shooterLeftShooter;
    SpeedController rightShooter = RobotMap.shooterRightShooter;
    
    DigitalInput rotatorBottomLimit = RobotMap.rotatorBottomLimit;
    
    Solenoid Pusher = RobotMap.shooterPusher;
    
    Encoder rotatorEncoder = RobotMap.rotatorEncoder;
    
    double rotatorSpeed;
    
    double leftSpeed;
    double rightSpeed;
    
    double position;
    boolean jsWasZero;
    double error = 2;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // FIRE BALL METHODS
    
    public void intakeOn() {
    	if (!OI.jS2.get()) {
    		leftShooter.set(-.75);
    		rightShooter.set(.75);
    	}
    }
    
    public void intakeOff() {
    		leftShooter.set(0);
    		rightShooter.set(0);
    }
    
    public void fire() {
    	if (!OI.jS1.get()) {
    		leftShooter.set(1);
    		rightShooter.set(-1);
    	}
    }
    
    // ROTATOR METHODS
    
    public void rotate(Joystick js) {
        
    	moveRotator(js);
    	
    	// If rotator is at bottom.
    	if (rotatorBottomLimit.get()) {
    		rotatorEncoder.reset();
    		
    		if (js.getRawAxis(1) > 0) {
    			moveRotator(js);
    		}
    		else {
    			leftRotator.set(0);
    			leftSpeed = 0;
    			rightRotator.set(0);
    			rightSpeed = 0;
    		}
    	}
    }
    
    private void moveRotator (Joystick js) {
    	if (js.getRawAxis(1) < -0.05) {     // Going down
			leftRotator.set(0.5*js.getRawAxis(1));
			leftSpeed = (0.5*js.getRawAxis(1));
			
			rightRotator.set(-0.75*js.getRawAxis(1));
			rightSpeed = (-0.75*js.getRawAxis(1));
			
			jsWasZero = false;
			
    	}
    	else if (js.getRawAxis(1) > 0.05) {     // Going up
			leftRotator.set(0.9*js.getRawAxis(1));
			leftSpeed = (0.9*js.getRawAxis(1));
			
			rightRotator.set(-0.94*js.getRawAxis(1));
			rightSpeed = (-0.94*js.getRawAxis(1));
			
			jsWasZero = false;
		}
    	else {
    		if (!jsWasZero) {
    			position = getDistance();
    		}
    		jsWasZero = true;
    		stopRotation(position);
    	}
    }
    
    public void stopRotation(double finalPosition) {

// SLOWING DOWN CODE- ADD LATER?
//    	if (rotatorSpeed > 0) {
//    		rotatorSpeed -= 0.1;
//    		leftRotator.set(rotatorSpeed);
//			rightRotator.set(-rotatorSpeed);
//    	}
    	
    	leftRotator.set(0);
    	leftSpeed = 0;
    	rightRotator.set(0);
    	rightSpeed = 0;
    	
//		ENCODER CODE TO STOP ROTATION AFTER JOYSTICK IS RELEASED.
    	
    	double tempVal = finalPosition + error;
    	double tempVal2 = finalPosition - error;
    	
    	if (getDistance() > tempVal) {     // If the rotator moves up.
    		leftRotator.set(-0.3);
    		leftSpeed = -0.3;
			rightRotator.set(0.3);
			rightSpeed = 0.3;
    	}
    	else if (getDistance() < tempVal2) {     // If the rotator moves down.
    		leftRotator.set(0.6);
    		leftSpeed = 0.6;
    		rightRotator.set(-0.6);
    		rightSpeed = -0.6;
    	}
    	else {     // Keep rotator in position.
    		if (getDistance() > 60) {
    			leftRotator.set(0.05);
    			leftSpeed = 0.05;
    			rightRotator.set(-0.05);
    			rightSpeed = -0.05;
    		}
    		else {
    			leftRotator.set(0.08);
        		leftSpeed = 0.08;
        		rightRotator.set(-0.08);
        		rightSpeed = -0.08;
    		}
    	}
    }
    
    // Used for autonomously moving the rotator (see Command RotatorToPosition)
    public void Rotate(double speed) {
    	leftRotator.set(speed);
    	rightRotator.set(-speed);
    }
    
    // GETTER METHODS FOR SMARTDASHBOARD
    public double getLeftSpeed() {
    	return leftSpeed;
    }
    
    public double getRightSpeed() {
    	return rightSpeed;
    }
    
    public boolean getBottomLimit() {
    	return rotatorBottomLimit.get();
    }
    
    public void resetEncoder() {
    	rotatorEncoder.reset();
    }
    
    public double getDistance() {
    	return rotatorEncoder.getDistance();
    }
    
    // PUSHER METHODS
    
    public void push() {
    	Pusher.set(true);
    }
    
    public void restractPusher() {
    	Pusher.set(false);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new Rotate());
    }
}

